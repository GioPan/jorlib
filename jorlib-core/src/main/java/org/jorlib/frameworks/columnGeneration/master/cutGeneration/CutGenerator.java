package org.jorlib.frameworks.columnGeneration.master.cutGeneration;

import java.util.List;

import org.jorlib.frameworks.columnGeneration.master.MasterData;
import org.jorlib.frameworks.columnGeneration.master.cuts.Inequality;
import org.jorlib.frameworks.columnGeneration.master.cuts.InequalityType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



public abstract class CutGenerator<T> {

	protected final Logger logger = LoggerFactory.getLogger(CutGenerator.class);
	
	protected final T modelData;
	protected MasterData masterData;
	public final InequalityType inequalityType; //The type of cuts this generator produces.
	
	public CutGenerator(T modelData, InequalityType inequalityType){
		this.modelData=modelData;
		this.inequalityType=inequalityType;
	}
	
	/**
	 * Separate valid inequalities
	 * @return returns true if an violated inequality has been found
	 */
	public abstract boolean generateInqualities();
	
	/**
	 * Add an inequality of the type generated by this CutGenerator to the model
	 */
	public abstract void addCut(Inequality cut);
	/**
	 * Returns all inequalities maintained by this generator
	 */
	public abstract List<Inequality> getCuts();
	
	/**
	 * Set the data class containing all the data from the master problem
	 * @param masterData
	 */
	public void setMasterData(MasterData masterData){
		this.masterData=masterData;
	}
	
	/**
	 * Close the generator
	 */
	public abstract void close();
}
