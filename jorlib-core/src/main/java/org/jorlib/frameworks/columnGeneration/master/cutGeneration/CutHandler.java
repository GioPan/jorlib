package org.jorlib.frameworks.columnGeneration.master.cutGeneration;

import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.List;

import org.jorlib.frameworks.columnGeneration.master.MasterData;
import org.jorlib.frameworks.columnGeneration.master.cuts.Inequality;
import org.jorlib.frameworks.columnGeneration.master.cuts.InequalityType;


/**
 * The CutHandler produces cuts for the master problem. Different cut types may be added.
 * @author jkinable
 *
 */
public class CutHandler{

	
	private EnumMap<InequalityType, CutGenerator> cutGenerators;
	
	public CutHandler(){
		cutGenerators=new EnumMap<InequalityType, CutGenerator>(InequalityType.class);
	}
	
	
	/**
	 * Supply the data class containing the data required by the cutGenerators.
	 * @param masterData
	 */
	public <V extends MasterData>void setMasterData(V masterData){
		for(CutGenerator cg : cutGenerators.values()){
			cg.setMasterData(masterData);
		}
	}
	
	/**
	 * Add a new cutGenerator
	 * @param cutGenerator
	 */
	public void addCutGenerator(CutGenerator cutGenerator){
		cutGenerators.put(cutGenerator.inequalityType, cutGenerator);
	}
	
	
	/**
	 * Generates cuts for the master problem of the column generation model. Stops generation as soon as a cut has been found
	 * @return true if cuts have been found
	 */
	public boolean generateCuts(){
		boolean foundCut=false;
		for(CutGenerator cutGen: cutGenerators.values()){
			foundCut |= cutGen.generateInqualities();
			if(foundCut)
				break;
		}
		return foundCut;
	}
	
	/**
	 * Add a set of cuts from an external source. Can be used to add a number of initial cuts which are not separated from the 
	 * master problem.
	 * @param cuts
	 */
	public void addCuts(Collection<Inequality> cuts){
		System.out.println("Cuthandler: Added initial cuts: "+cuts.size());
		for(Inequality cut : cuts){
			cutGenerators.get(cut.type).addCut(cut);
		}
	}
	
	/**
	 * @return Gets a list of all cuts generated by the Cut Generators
	 */
	public List<Inequality> getCuts(){
		List<Inequality> cuts=new ArrayList<Inequality>();
		for(CutGenerator cutGen : cutGenerators.values())
			cuts.addAll(cutGen.getCuts());
		return cuts;
	}
	
	/**
	 * Close the Cut Generators
	 */
	public void close(){
		for(CutGenerator cutGen : cutGenerators.values()){
			cutGen.close();
		}
	}
}
