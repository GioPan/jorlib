/* ==========================================
 * jORLib : a free Java OR library
 * ==========================================
 *
 * Project Info:  https://github.com/jkinable/jorlib
 * Project Creator:  Joris Kinable (https://github.com/jkinable)
 *
 * (C) Copyright 2015, by Joris Kinable and Contributors.
 *
 * This program and the accompanying materials are licensed under GPLv3
 *
 */
/* -----------------
 * CutHandler.java
 * -----------------
 * (C) Copyright 2015, by Joris Kinable and Contributors.
 *
 * Original Author:  Joris Kinable
 * Contributor(s):   -
 *
 * $Id$
 *
 * Changes
 * -------
 *
 */
package org.jorlib.frameworks.columnGeneration.master.cutGeneration;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.jorlib.frameworks.columnGeneration.master.MasterData;
import org.jorlib.frameworks.columnGeneration.model.ModelInterface;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * The CutHandler is a manager class which maintains various CutGenerators to generate cuts of different types.
 * 
 * @author Joris Kinable
 * @version 13-4-2015
 *
 */
public class CutHandler<T extends ModelInterface,W extends MasterData>{

	/** Logger for this class **/
	protected final Logger logger = LoggerFactory.getLogger(CutHandler.class);

	/** Set of CutGenerators **/
	protected Set<CutGenerator<T,W>> cutGenerators;

	/** Creates a new CutHandler **/
	public CutHandler(){
		cutGenerators=new LinkedHashSet<>();
	}
	
	
	/**
	 * Supply the data object containing the data from the master problem which is required by the cutGenerators to
	 * separate valid inequalities.
	 *
	 * @param masterData Master data object
	 */
	public void setMasterData(W masterData){
		for(CutGenerator<T,W> cg : cutGenerators){
			cg.setMasterData(masterData);
		}
	}
	
	/**
	 * Add a new cutGenerator
	 * @param cutGenerator cut generator
	 */
	public void addCutGenerator(CutGenerator<T,W> cutGenerator){
		cutGenerators.add(cutGenerator);
	}

	/**
	 * Remove a cutGenerator
	 * @param cutGenerator cut generator
	 */
	public void removeCutGenerator(CutGenerator<T,W> cutGenerator){
		cutGenerators.remove(cutGenerator);
	}
	
	/**
	 * Generates cuts for the master problem of the column generation model, by invoking the generateInequalities() method for each
	 * of the registered cut generators. Returns as soon as a single cut has been found!
	 * @return true if cuts have been found
	 */
	public boolean generateCuts(){
		boolean foundCut=false;
		for(CutGenerator<T,W> cutGen: cutGenerators){
			foundCut = cutGen.generateInqualities();
			if(foundCut)
				break;
		}
		return foundCut;
	}
	
	/**
	 * Add a set of cuts from an external source. Can be used to add a number of initial cuts which are not separated from the 
	 * master problem.
	 * @param cuts Collection of inequalities
	 */
	public void addCuts(Collection<Inequality> cuts){
		System.out.println("Cuthandler: Added initial cuts: "+cuts.size());
		for(Inequality cut : cuts){
			if(!this.cutGenerators.contains(cut.maintainingGenerator))
				throw new RuntimeException("Attempt to add cut failed. CutGenerator for this type of cuts is not registered with the cut handler!");
			else
				cut.maintainingGenerator.addCut(cut);
		}
	}
	
	/**
	 * Gets a list of all cuts generated by the Cut Generators
	 * @return A list of all cuts generated by the Cut Generators
	 */
	public List<Inequality> getCuts(){
		List<Inequality> cuts=new ArrayList<>();
		for(CutGenerator<T,W> cutGen : cutGenerators)
			cuts.addAll(cutGen.getCuts());
		return cuts;
	}
	
	/**
	 * Close the Cut Generators
	 */
	public void close(){
		for(CutGenerator<T,W> cutGen : cutGenerators){
			cutGen.close();
		}
	}
}
